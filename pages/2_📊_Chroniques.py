import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="Visualisation", page_icon="üìä", layout="centered")

st.title("üìä Visualisation des chroniques")
st.markdown("---")

# ---------------------------------------------------
# Import de la classe TimeSeriesPlot_Plotly
# ---------------------------------------------------
from visualisation.plotly_chroniques import TimeSeriesPlot_Plotly

# ---------------------------------------------------
# Fonctions utilitaires
# ---------------------------------------------------
def check_data_availability():
    """V√©rifie si les donn√©es sont disponibles dans la session"""
    if 'uploaded_data' not in st.session_state:
        st.warning("Aucune donn√©e n'a √©t√© t√©l√©charg√©e. Veuillez retourner √† la page Chargement pour t√©l√©charger vos donn√©es.")
        st.stop()
    
    if 'params' not in st.session_state:
        st.warning("Aucun param√®tre n'a √©t√© configur√©. Veuillez retourner √† la page Chargement pour configurer vos param√®tres.")
        st.stop()

def load_data():
    """Charge les donn√©es depuis la session"""
    csv_data = st.session_state['uploaded_data']
    try:
        data = pd.read_csv(io.StringIO(csv_data.decode('utf-8')))
    except Exception as e:
        st.error(f"Erreur lors de la lecture des donn√©es: {e}")
    
    params = st.session_state['params']
    time_col = params['data_info']['time_col']
    
    data[time_col] = pd.to_datetime(data[time_col], errors='coerce')
    
    return data, params

# ---------------------------------------------------
# V√©rification des donn√©es
# ---------------------------------------------------
check_data_availability()
df, params = load_data()

# ---------------------------------------------------
# Extraction des param√®tres
# ---------------------------------------------------
time_col = params['data_info']['time_col']
volume_col = params['data_info']['volume_col']
year_min = params['visualization']['year_min']
year_max = params['visualization']['year_max']
custom_max_value = params['data_info'].get('custom_max_value')  # Peut √™tre None

# ---------------------------------------------------
# Interface utilisateur pour les param√®tres dans la sidebar
# ---------------------------------------------------
with st.sidebar:
    st.header("Param√®tres de visualisation")
    
    st.subheader("Donn√©es")
    
    year_range = st.slider(
        "Plage d'ann√©es",
        min_value=int(year_min),
        max_value=int(year_max),
        value=(int(year_min), int(year_max))
    )
    
    freq_options = {
        "Journalier": "D",
        "Hebdomadaire": "W",
        "Mensuel (fin)": "ME"
    }
    
    freq_display = st.selectbox(
        "Fr√©quence",
        options=list(freq_options.keys()),
        index=0,
        help="Journalier, Hebdomadaire, ou Mensuel (fin de mois)"
    )
    
    freq = freq_options[freq_display]
    
    st.subheader("Affichage")
    
    log_y = st.checkbox("√âchelle logarithmique (log_y)", value=False)
    
    start_month = st.slider(
        "Mois de d√©but de cycle",
        min_value=1,
        max_value=12,
        value=1,
        help="D√©finit le mois de d√©but pour le cycle annuel"
    )
    
    st.subheader("Analyse")
    
    focus_year = st.slider(
        "Ann√©e de r√©f√©rence",
        min_value=int(year_min),
        max_value=int(year_max),
        value=int(year_max-1),
        help="Ann√©e mise en √©vidence dans les analyses statistiques et comparatives"
    )
    
    rolling_window = st.slider(
        "Fen√™tre glissante (ann√©es)",
        min_value=2,
        max_value=10,
        value=5,
        help="Nombre d'ann√©es utilis√©es pour le calcul de la moyenne mobile"
    )
    
    st.session_state['params']['visualization']['year_min_visualization'] = year_range[0]
    st.session_state['params']['visualization']['year_min_visualization'] = year_range[1]
    st.session_state['params']['visualization']['freq'] = freq
    st.session_state['params']['visualization']['log_y'] = log_y
    st.session_state['params']['visualization']['focus_year'] = focus_year
    st.session_state['params']['visualization']['rolling_window'] = rolling_window
    st.session_state['params']['visualization']['start_month'] = start_month

# ---------------------------------------------------
# Mise √† jour des param√®tres pour cette session
# ---------------------------------------------------
year_min, year_max = year_range

st.header(f"Visualisation des chroniques pour {volume_col}")
st.write(f"Donn√©es charg√©es: **{time_col}** (temps) et **{volume_col}** (variable explor√©e)")
st.write(f"P√©riode: {year_min} - {year_max}")

with st.expander("üìÑ Informations techniques"):
    st.markdown("""
    ### Gestion des semaines et du cycle annuel personnalis√©

    #### Num√©rotation des semaines

    Les semaines utilis√©es ne suivent pas le calendrier ISO (lundi au dimanche). Elles sont calcul√©es √† partir du jour de l‚Äôann√©e (`doy`) :

    ```text
    week_num = floor((doy - 1) / 7) + 1
    ```

    Chaque semaine contient 7 jours, et la 52e semaine regroupe tous les jours restants. Les 29 f√©vrier sont supprim√©s et le 365e jour est rattach√© √† la derni√®re semaine (52), formant ainsi une semaine de 8 jours.

    ---

    #### D√©but d‚Äôann√©e personnalis√© (`start_month`)

    Il est possible de d√©finir un mois de d√©but du cycle annuel diff√©rent de janvier, par exemple octobre (`start_month = 10`).

    Cela entra√Æne :
    - Un recalcul des ann√©es : le cycle annuel commence en octobre d'une ann√©e N et se termine en septembre de l‚Äôann√©e N+1.
    - Une reclassification des mois et des jours de l‚Äôann√©e (le jour 1 correspond au 1er octobre).
    - Une adaptation des axes temporels dans les visualisations.

    **Exemple :** avec `start_month = 10`, janvier 2017 appartient au cycle de l'ann√©e 2017 (qui couvre oct. 2016 √† sept. 2017).

    ---

    #### Cons√©quences sur le traitement

    - Les dates sont converties en `datetime` pour tous les traitements.
    - Les ann√©es incompl√®tes sont ignor√©es, ou interpol√©es si n√©cessaires.
    - Le cumul annuel peut √™tre activ√© (`cumul=True`), bas√© sur le cycle d√©fini.
    - Des moyennes par jour, semaine ou mois sont calcul√©es selon `freq`.
    - Un lissage interannuel est possible via `rolling_window`.
    - En mode `statistics`, des bandes de quantiles sont g√©n√©r√©es avec comparaison √† une ann√©e de r√©f√©rence.
    """)
# ---------------------------------------------------
# Filtrage des donn√©es
# ---------------------------------------------------
df["year"] = df[time_col].dt.year
df_filtered = df[df["year"].between(year_min, year_max)]

# D√©terminer la valeur maximale pour la ligne de r√©f√©rence
max_volume = custom_max_value if custom_max_value is not None else df_filtered[volume_col].max()
max_volume_label = "Volume Maximal (personnalis√©)" if custom_max_value is not None else "Volume Maximal"

# ---------------------------------------------------
# Chronique de Volume - Standard
# ---------------------------------------------------
st.header("S√©rie temporelle chronologique")
tab1, tab2, tab3 = st.tabs(["Standard", "Moyenne glissante", "Comparaison"])

with tab1:
    plotter = TimeSeriesPlot_Plotly(
        x_axis_title="Date",
        y_axis_title=f"Volume ({volume_col})",
        x_range=(year_min, year_max),
        log_y=log_y,
        mode='historical',
        start_month=start_month
    )

    plotter.add_series(
        df=df_filtered,
        time_col=time_col,
        var_col=volume_col,
        legend_name=f"{volume_col}",
        freq=freq,
        year_min=year_min,
        year_max=year_max,
    )
    
    plotter.add_line(
        orientation='h',
        position=max_volume,
        line_dash='dash',
        col='all',
        color='red',
        label=f'{max_volume_label} {max_volume:,.0f}'
    )

    plotter.fig = plotter.create_figure()
    st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

with tab2:
    plotter = TimeSeriesPlot_Plotly(
        x_axis_title="Date",
        y_axis_title=f"Volume ({volume_col})",
        x_range=(year_min, year_max),
        log_y=log_y,
        mode='historical',
        start_month=start_month
    )

    plotter.add_series(
        df=df_filtered,
        time_col=time_col,
        var_col=volume_col,
        legend_name=f"{volume_col}",
        freq=freq,
        year_min=year_min,
        year_max=year_max,
        rolling_window=rolling_window
    )
    
    plotter.add_line(
        orientation='h',
        position=max_volume,
        line_dash='dash',
        col='all',
        color='red',
        label=f'{max_volume_label} {max_volume:,.0f}'
    )

    plotter.fig = plotter.create_figure()
    st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

with tab3:
    plotter = TimeSeriesPlot_Plotly(
        x_axis_title="Date",
        y_axis_title=f"Volume ({volume_col})",
        x_range=(year_min, year_max),
        log_y=log_y,
        mode='historical',
        start_month=start_month,
        focus_year=focus_year
    )

    plotter.add_series(
        df=df_filtered,
        time_col=time_col,
        var_col=volume_col,
        legend_name=f"{volume_col}",
        freq=freq,
        year_min=year_min,
        year_max=year_max
    )
    
    plotter.add_line(
        orientation='h',
        position=max_volume,
        line_dash='dash',
        col='all',
        color='red',
        label=f'{max_volume_label} {max_volume:,.0f}'
    )

    plotter.fig = plotter.create_figure()
    st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

# ---------------------------------------------------
# √âvolution du volume (cycle annuel)
# ---------------------------------------------------
st.header("Cycle annuel")
tab1, tab2 = st.tabs(["Standard", "Moyenne glissante"])

with tab1:
    plotter = TimeSeriesPlot_Plotly(
        x_axis_title="Date",
        y_axis_title=f"Volume ({volume_col})",
        x_range=(year_min, year_max),
        log_y=log_y,
        mode='annual_cycle',
        start_month=start_month
    )

    plotter.add_series(
        df=df_filtered,
        time_col=time_col,
        var_col=volume_col,
        legend_name=f"{volume_col}",
        freq=freq,
        year_min=year_min,
        year_max=year_max,
    )
    
    plotter.add_line(
        orientation='h',
        position=max_volume,
        line_dash='dash',
        col='all',
        color='red',
        label=f'{max_volume_label} {max_volume:,.0f}'
    )

    plotter.fig = plotter.create_figure()
    st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

with tab2:
    plotter = TimeSeriesPlot_Plotly(
        x_axis_title="Date",
        y_axis_title=f"Volume ({volume_col})",
        x_range=(year_min, year_max),
        log_y=log_y,
        mode='annual_cycle',
        start_month=start_month
    )

    plotter.add_series(
        df=df_filtered,
        time_col=time_col,
        var_col=volume_col,
        legend_name=f"{volume_col}",
        freq=freq,
        year_min=year_min,
        year_max=year_max,
        rolling_window=rolling_window
    )

    plotter.add_line(
        orientation='h',
        position=max_volume,
        line_dash='dash',
        col='all',
        color='red',
        label=f'{max_volume_label} {max_volume:,.0f}'
    )

    plotter.fig = plotter.create_figure()
    st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

# ---------------------------------------------------
# Statistiques
# ---------------------------------------------------
st.header("Analyse statistique")

plotter = TimeSeriesPlot_Plotly(
    x_axis_title="Date",
    y_axis_title=f"Volume ({volume_col})",
    x_range=(year_min, year_max),
    log_y=log_y,
    mode='statistics',
    focus_year=focus_year,
    start_month=start_month
)

plotter.add_series(
    df=df_filtered,
    time_col=time_col,
    var_col=volume_col,
    legend_name=f"{volume_col}",
    freq=freq,
    year_min=year_min,
    year_max=year_max,
)

plotter.add_line(
    orientation='h',
    position=max_volume,
    line_dash='dash',
    col='all',
    color='red',
    label=f'{max_volume_label} {max_volume:,.0f}'
)

plotter.fig = plotter.create_figure()
st.plotly_chart(plotter.fig, theme="streamlit", use_container_width=True)

# ---------------------------------------------------
# Informations sur l'utilisation
# ---------------------------------------------------
with st.expander("üí° Conseils d'utilisation"):
    st.markdown("""
    ### Comment utiliser les visualisations
    
    - **S√©rie temporelle** : Vue chronologique de l'√©volution du volume
    - **Cycle annuel** : Compare les variations saisonni√®res entre les diff√©rentes ann√©es
    - **Analyse statistique** : Pr√©sente les m√©dianes, quartiles et compare avec une ann√©e de r√©f√©rence
    
    Utilisez les param√®tres dans la barre lat√©rale pour personnaliser les visualisations selon vos besoins.
    
    Pour t√©l√©charger un graphique, cliquez sur l'ic√¥ne d'appareil photo qui appara√Æt en haut √† droite de chaque graphique lorsque vous passez votre souris dessus.
    """)
